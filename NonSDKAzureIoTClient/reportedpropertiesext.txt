        /// <summary>
        /// As seen on https://docs.microsoft.com/en-us/rest/api/eventhub/generate-sas-token#c
        /// </summary>
        /// <param name="resourceUri"></param>
        /// <param name="keyName"></param>
        /// <param name="key"></param>
        /// <returns></returns>
        //private static string createToken(string resourceUri, string key)
        //{
        //    TimeSpan sinceEpoch = DateTime.UtcNow - new DateTime(1970, 1, 1);
        //    var week = 60 * 24 * 7;
        //    var expiry = Convert.ToString((int)sinceEpoch.TotalMinutes + week);
        //    string stringToSign = HttpUtility.UrlEncode(resourceUri) + "\n" + expiry;
        //    HMACSHA256 hmac = new HMACSHA256(Encoding.UTF8.GetBytes(key));
        //    var signature = Convert.ToBase64String(hmac.ComputeHash(Encoding.UTF8.GetBytes(stringToSign)));
        //    var sasToken = $"SharedAccessSignature sr={HttpUtility.UrlEncode(resourceUri)}&sig={HttpUtility.UrlEncode(signature)}&se={expiry}";
        //    return sasToken;
        //}

        //public static string ConstructToken(string iotHubName, string policyName, string key, int expiryInSeconds = 3600)
        //{
        //    var fromEpochStart = DateTime.UtcNow - new DateTime(1970, 1, 1);
        //    var expiry = Convert.ToString((int)fromEpochStart.TotalSeconds + expiryInSeconds);

        //    var stringToSign = $"{WebUtility.UrlEncode(iotHubName)}\n{expiry}";

        //    var hmac = new HMACSHA256(Convert.FromBase64String(key));
        //    var signature = Convert.ToBase64String(hmac.ComputeHash(Encoding.UTF8.GetBytes(stringToSign)));

        //    var token = $"SharedAccessSignature sr={WebUtility.UrlEncode(iotHubName)}&sig={WebUtility.UrlEncode(signature)}&se={expiry}";

        //    if (!string.IsNullOrEmpty(policyName))
        //    {
        //        token += "&skn=" + policyName;
        //    }

        //    return token;
        //}
